{"version":3,"sources":["webpack:///src/app/pages/profil/components/add-profil/add-profil.component.html","webpack:///src/app/pages/profil/components/experience/experience.component.html","webpack:///src/app/pages/profil/components/final-state/final-state.component.html","webpack:///src/app/pages/profil/components/info-plus/info-plus.component.html","webpack:///src/app/pages/profil/components/job-info/job-info.component.html","webpack:///src/app/pages/profil/components/main/main.component.html","webpack:///src/app/pages/profil/components/personal-info/personal-info.component.html","webpack:///src/app/pages/profil/components/preview-profil/preview-profil.component.html","webpack:///src/app/pages/profil/components/upload-video/upload-video.component.html","webpack:///src/app/pages/profil/components/values/values.component.html","webpack:///src/app/pages/profil/components/add-profil/add-profil.component.scss","webpack:///src/app/pages/profil/components/add-profil/add-profil.component.ts","webpack:///src/app/pages/profil/components/experience/experience.component.scss","webpack:///src/app/pages/profil/components/experience/experience.component.ts","webpack:///src/app/pages/profil/components/final-state/final-state.component.scss","webpack:///src/app/pages/profil/components/final-state/final-state.component.ts","webpack:///src/app/pages/profil/components/info-plus/info-plus.component.scss","webpack:///src/app/pages/profil/components/info-plus/info-plus.component.ts","webpack:///src/app/pages/profil/components/job-info/job-info.component.scss","webpack:///src/app/pages/profil/components/job-info/job-info.component.ts","webpack:///src/app/pages/profil/components/main/main.component.scss","webpack:///src/app/pages/profil/components/main/main.component.ts","webpack:///src/app/pages/profil/components/personal-info/personal-info.component.scss","webpack:///src/app/pages/profil/components/personal-info/personal-info.component.ts","webpack:///src/app/pages/profil/components/preview-profil/preview-profil.component.scss","webpack:///src/app/pages/profil/components/preview-profil/preview-profil.component.ts","webpack:///src/app/pages/profil/components/upload-video/upload-video.component.scss","webpack:///src/app/pages/profil/components/upload-video/upload-video.component.ts","webpack:///src/app/pages/profil/components/values/values.component.scss","webpack:///src/app/pages/profil/components/values/values.component.ts","webpack:///src/app/pages/profil/dashboard-routing.module.ts","webpack:///src/app/pages/profil/dashboard.module.ts"],"names":["AddProfilComponent","authService","actionSheetController","loadingController","pictureUtilsService","zone","toastService","fileService","candidateService","trans","hasChanged","oldPercentage","value","picture","user","calculePercentage","create","header","buttons","text","icon","handler","syncing","setTimeout","loading","dismiss","error","present","uploadFromCamera","then","imageData","run","subscribe","res","candidate","file","_error","uploadFromGallery","alert","actionSheet","percentage","Number","console","log","changeInfos","Object","assign","Math","round","toFixed","currentStep","setPercentage","jobInfo","selector","template","ExperienceComponent","fb","globalService","inWork","checkDate","initForm","setValues","form","group","levelOfStudies","experiences","array","getExperienceFields","trainings","getTrainings","i","event","get","job","required","startedDate","endDate","company","activitySector","location","validator","checkDates","controls","min","Date","setHours","max","dateError","name","studyLevel","typeOfTraining","yearOfGraduation","school","control","length","fields","splice","forEach","val","map","x","push","ctrl","index","removeAt","training","getFullYear","infoPlus","providers","FinalStateComponent","modalController","component","modal","completed","candidateDashboard","InfoPlusComponent","router","languagesList","fileUploder","type","item","languageIndex","languages","findIndex","_id","language","languageLevelIndex","languagesLevels","languageLevel","programingLanguages","logiciel","cv","webSite","blog","linkedin","instagram","twitter","facebook","reset","patchValue","values","JobInfoComponent","selectedItems","dropdownSettings","singleSelection","idField","textField","unSelectAllText","itemsShowLimit","allowSearchFilter","enableCheckAll","searchedPost","jobType","jobMode","supposedSalaryMin","supposedSalaryMax","usageTitles","functions","locations","contracts","checkSupposedSalary","salaryErreur","profileExperiences","MainComponent","alertController","subscription","events","snapshot","firstChild","data","title","pageTitle","step","profile","addProfile","profileVideo","message","role","logout","desconnect","alertSave","unsubscribe","PersonalInfoComponent","firstName","lastName","birthday","gender","phoneNumber","availability","experienceYears","currentJob","currentSalary","managerialLevel","effective","goal","PreviewProfilComponent","currentLocation","setTrainings","setExperiences","setSkills","setLanguages","studyLevelIndex","s","typeOfTrainingIndex","typeOfTrainings","experienceYearsIndex","locationIndex","valueIndex","softSkillIndex","softSkills","softSkill","managerialLevelIndex","managerialLevels","UploadVideoComponent","video","setValue","finalStep","ValuesComponent","skills","routes","path","children","DashboardRoutingModule","imports","forChild","exports","DashboardModule","declarations"],"mappings":"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","file":"pages-profil-dashboard-module-es5.js","sourcesContent":["export default \"<div appScrollToTop>\\n  <form class=\\\"d-block\\\">\\n    <div class=\\\"text-center mt-3\\\">\\n      <h1 class=\\\"title\\\">Ajouter votre meilleure photo <br> de profil ! </h1>\\n      <img class=\\\"circle-image mt-3\\\"\\n        [src]=\\\"authService.user.picture ? (('backend_url' | env) + authService.user.picture.name) : '/assets/img/default-image.svg'\\\"\\n        alt=\\\"Add Photo\\\" (click)=\\\"addImageAction()\\\">\\n    </div>\\n  \\n    <div class=\\\"mt-3 text-center\\\">\\n      <ion-button class=\\\"w-80\\\" color=\\\"primary\\\" (click)=\\\"onSave()\\\">\\n        Continuez\\n      </ion-button>\\n    </div>\\n  </form>\\n</div>\";","export default \"<div appScrollToTop>\\n    <form class=\\\"d-block\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSave()\\\">\\n        <div formArrayName=\\\"experiences\\\">\\n            <ng-container *ngFor=\\\"let experience of form.get('experiences')['controls']; let i=index; let last=last;\\\"\\n                [formGroupName]=\\\"i\\\">\\n                <hr class=\\\"border-bottom\\\" *ngIf=\\\"i>0\\\">\\n                <div class=\\\"w-100\\\">\\n                    <ion-item class=\\\"custom-input\\\">\\n                        <ion-label position=\\\"floating\\\">Emploi occupé <span class=\\\"required\\\">*</span></ion-label>\\n                        <ion-input type=\\\"text\\\" formControlName=\\\"job\\\"></ion-input>\\n                    </ion-item>\\n                    <small class=\\\"text-error\\\"\\n                        *ngIf=\\\"form.get('experiences')['controls'][i].get('job').invalid &&\\n                        form.get('experiences')['controls'][i].get('job').errors.required && (form.get('experiences')['controls'][i].get('job').dirty || form.get('experiences')['controls'][i].get('job').touched) \\\">\\n                        Champ obligatoire\\n                    </small>\\n                </div>\\n\\n                <div class=\\\"w-100\\\">\\n                    <ion-item class=\\\"custom-select\\\">\\n                        <ion-label position=\\\"floating\\\">Fonction <span class=\\\"required\\\">*</span></ion-label>\\n                        <ion-select class=\\\"w-100\\\" ok-text=\\\"Ok\\\" cancel-text=\\\"Annuler\\\" placeholder=\\\"Sélectionner\\\"\\n                            formControlName=\\\"function\\\">\\n                            <ion-select-option *ngFor=\\\"let item of globalService.functions\\\" [value]=\\\"item._id\\\">\\n                                {{item.name}}\\n                            </ion-select-option>\\n                        </ion-select>\\n                    </ion-item>\\n                    <small class=\\\"text-error\\\"\\n                        *ngIf=\\\"form.get('experiences')['controls'][i].get('function').invalid && (form.get('experiences')['controls'][i].get('function').dirty || form.get('experiences')['controls'][i].get('function').touched) \\\">\\n                        Champ obligatoire\\n                    </small>\\n                </div>\\n\\n                <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between\\\" fxLayoutGap=\\\"20px\\\">\\n                    <div fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\">\\n                        <div class=\\\"w-100\\\">\\n                            <ion-item class=\\\"custom-datetime\\\">\\n                                <ion-label position=\\\"floating\\\">Date debut <span class=\\\"required\\\">*</span></ion-label>\\n                                <ion-datetime placeholder=\\\"De\\\" formControlName=\\\"startedDate\\\">\\n                                </ion-datetime>\\n                            </ion-item>\\n                            <small class=\\\"text-error\\\"\\n                                *ngIf=\\\"form.get('experiences')['controls'][i].get('startedDate').invalid && (form.get('experiences')['controls'][i].get('startedDate').dirty || form.get('experiences')['controls'][i].get('startedDate').touched) \\\">\\n                                Champ obligatoire\\n                            </small>\\n                        </div>\\n                    </div>\\n                    <div fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\">\\n\\n                        <div class=\\\"w-100\\\">\\n                             \\n                            <ion-item class=\\\"custom-datetime\\\" *ngIf=\\\"inWork[i]\\\">\\n                                <ion-label position=\\\"floating\\\">Date fin</ion-label>\\n                                <ion-datetime placeholder=\\\"À\\\" formControlName=\\\"endDate\\\"></ion-datetime>\\n                            </ion-item> \\n                             <ion-item class=\\\"custom-static-input\\\" *ngIf=\\\"!inWork[i]\\\">\\n                                <ion-label position=\\\"floating\\\">Date fin</ion-label>\\n                                <ion-input value=\\\"Aujourd’hui\\\" readonly></ion-input>\\n                            </ion-item>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n                <small class=\\\"text-error\\\" *ngIf=\\\"\\n                form.get('experiences')['controls'][i].get('startedDate').touched && \\n                form.get('experiences')['controls'][i].get('endDate').touched &&\\n                form.get('experiences')['controls'][i].hasError('dateError')\\\">\\n                    Date fin doit être supérieur de la date debut\\n                </small>\\n\\n                <div>\\n                    <ion-item class=\\\"custom-checkbox\\\" lines=\\\"none\\\">\\n                        <ion-label class=\\\"ml-1\\\">J’occupe actuellement ce poste</ion-label>\\n                        <ion-checkbox class=\\\"ion-no-margin\\\" color=\\\"primary\\\" slot=\\\"start\\\"\\n                          [checked]=\\\"!inWork[i]\\\" (ionChange)=\\\"inWorkChange(i, $event)\\\">\\n                        </ion-checkbox>\\n                    </ion-item>\\n                </div>\\n\\n                <!-- <small class=\\\"text-error\\\"\\n                    *ngIf=\\\"form.get('experiences')['controls'][i].get('endDate').invalid || inWork\\\">\\n                    Veuillez préciser si vous étes en cours de cette experience ou bien de mettre une date limite.\\n                </small> -->\\n\\n                <div class=\\\"w-100\\\">\\n                    <ion-item class=\\\"custom-input\\\">\\n                        <ion-label position=\\\"floating\\\">Entreprise <span class=\\\"required\\\">*</span></ion-label>\\n                        <ion-input type=\\\"text\\\" formControlName=\\\"company\\\"></ion-input>\\n                    </ion-item>\\n                    <small class=\\\"text-error\\\"\\n                        *ngIf=\\\"form.get('experiences')['controls'][i].get('company').invalid && (form.get('experiences')['controls'][i].get('company').dirty || form.get('experiences')['controls'][i].get('company').touched) \\\">\\n                        Champ obligatoire\\n                    </small>\\n                </div>\\n\\n                <div class=\\\"w-100\\\">\\n                    <ion-item class=\\\"custom-select\\\">\\n                        <ion-label position=\\\"floating\\\">Secteur d’activité <span class=\\\"required\\\">*</span></ion-label>\\n                        <ion-select class=\\\"w-100\\\" ok-text=\\\"Ok\\\" cancel-text=\\\"Annuler\\\" placeholder=\\\"Sélectionner\\\"\\n                            formControlName=\\\"activitySector\\\">\\n                            <ion-select-option *ngFor=\\\"let item of globalService.activitySectors\\\" [value]=\\\"item._id\\\">\\n                                {{item.name}}\\n                            </ion-select-option>\\n                        </ion-select>\\n                    </ion-item>\\n                    <small class=\\\"text-error\\\"\\n                        *ngIf=\\\"form.get('experiences')['controls'][i].get('activitySector').invalid && (form.get('experiences')['controls'][i].get('activitySector').dirty || form.get('experiences')['controls'][i].get('activitySector').touched) \\\">\\n                        Champ obligatoire\\n                    </small>\\n                </div>\\n\\n                <div class=\\\"w-100\\\">\\n                    <ion-item class=\\\"custom-input\\\">\\n                        <ion-label position=\\\"floating\\\">Lieu <span class=\\\"required\\\">*</span></ion-label>\\n                        <ion-input type=\\\"text\\\" formControlName=\\\"location\\\"></ion-input>\\n                    </ion-item>\\n                    <small class=\\\"text-error\\\"\\n                        *ngIf=\\\"form.get('experiences')['controls'][i].get('location').invalid && (form.get('experiences')['controls'][i].get('location').dirty || form.get('experiences')['controls'][i].get('location').touched) \\\">\\n                        Champ obligatoire\\n                    </small>\\n                </div>\\n\\n                <div class=\\\"text-right mt-1\\\">\\n                    <ion-button fill=\\\"outline\\\" class=\\\"btn-outline-danger ml-30\\\" color=\\\"danger\\\"\\n                        *ngIf=\\\"form.controls['experiences']['controls'].length > 1\\\"\\n                        (click)=\\\"removeField(i, 'experiences')\\\">\\n                        Supprimer\\n                    </ion-button>\\n                </div>\\n            </ng-container>\\n            <div class=\\\"text-left mt-1\\\">\\n                <ion-button fill=\\\"outline\\\" class=\\\"btn-outline\\\" color=\\\"primary\\\" (click)=\\\"addField('experiences')\\\"\\n                    [disabled]=\\\"!form.controls['experiences'].valid\\\">\\n                    <ion-icon slot=\\\"start\\\" name=\\\"add\\\"></ion-icon>\\n                    Ajouter une expérience\\n                </ion-button>\\n            </div>\\n\\n        </div>\\n\\n        <ion-item class=\\\"custom-select w-100 mt-1\\\">\\n            <ion-label position=\\\"floating\\\">Niveau d'études le plus élevé <span class=\\\"required\\\">*</span></ion-label>\\n            <ion-select class=\\\"w-100\\\" ok-text=\\\"Ok\\\" cancel-text=\\\"Annuler\\\" placeholder=\\\"Sélectionner\\\"\\n                formControlName=\\\"levelOfStudies\\\">\\n                <ion-select-option *ngFor=\\\"let item of globalService.levelOfStudies\\\" [value]=\\\"item._id\\\">\\n                    {{item.name}}</ion-select-option>\\n            </ion-select>\\n            <small class=\\\"text-error\\\"\\n                *ngIf=\\\"form.get('levelOfStudies').invalid && (form.get('levelOfStudies').dirty || form.get('levelOfStudies').touched) \\\">\\n                Champ obligatoire\\n            </small>\\n        </ion-item>\\n\\n        <div formArrayName=\\\"trainings\\\">\\n\\n            <ng-container *ngFor=\\\"let training of form.get('trainings')['controls']; let i=index; let last=last;\\\"\\n                [formGroupName]=\\\"i\\\">\\n\\n                <div class=\\\"w-100\\\">\\n                    <ion-item class=\\\"custom-input\\\">\\n                        <ion-label position=\\\"floating\\\">Intitulé de la formation <span class=\\\"required\\\">*</span>\\n                        </ion-label>\\n                        <ion-input type=\\\"text\\\" formControlName=\\\"name\\\"></ion-input>\\n                    </ion-item>\\n                    <small class=\\\"text-error\\\"\\n                        *ngIf=\\\"form.get('trainings')['controls'][i].get('name').invalid && (form.get('trainings')['controls'][i].get('name').dirty || form.get('trainings')['controls'][i].get('name').touched) \\\">\\n                        Champ obligatoire\\n                    </small>\\n                </div>\\n\\n                <ion-item class=\\\"custom-select w-100\\\">\\n                    <ion-label position=\\\"floating\\\">Niveau d'études <span class=\\\"required\\\">*</span></ion-label>\\n                    <ion-select class=\\\"w-100\\\" ok-text=\\\"Ok\\\" cancel-text=\\\"Annuler\\\" placeholder=\\\"Sélectionner\\\"\\n                        formControlName=\\\"studyLevel\\\">\\n                        <ion-select-option *ngFor=\\\"let item of globalService.levelOfStudies\\\" [value]=\\\"item._id\\\">\\n                            {{item.name}}</ion-select-option>\\n                    </ion-select>\\n                    <small class=\\\"text-error\\\"\\n                        *ngIf=\\\"form.get('trainings')['controls'][i].get('studyLevel').invalid && (form.get('trainings')['controls'][i].get('studyLevel').dirty || form.get('trainings')['controls'][i].get('studyLevel').touched) \\\">\\n                        Champ obligatoire\\n                    </small>\\n                </ion-item>\\n\\n\\n                <ion-item class=\\\"custom-select w-100\\\">\\n                    <ion-label position=\\\"floating\\\">Type de formation <span class=\\\"required\\\">*</span></ion-label>\\n                    <ion-select class=\\\"w-100\\\" ok-text=\\\"Ok\\\" cancel-text=\\\"Annuler\\\" placeholder=\\\"Sélectionner\\\"\\n                        formControlName=\\\"typeOfTraining\\\">\\n                        <ion-select-option *ngFor=\\\"let item of globalService.typeOfTrainings\\\" [value]=\\\"item._id\\\">\\n                            {{item.name}}</ion-select-option>\\n                    </ion-select>\\n                    <small class=\\\"text-error\\\"\\n                        *ngIf=\\\"form.get('trainings')['controls'][i].get('typeOfTraining').invalid && (form.get('trainings')['controls'][i].get('typeOfTraining').dirty || form.get('trainings')['controls'][i].get('typeOfTraining').touched) \\\">\\n                        Champ obligatoire\\n                    </small>\\n                </ion-item>\\n\\n                <div class=\\\"w-100\\\">\\n                    <ion-item class=\\\"custom-input\\\">\\n                        <ion-label position=\\\"floating\\\">École <span class=\\\"required\\\">*</span></ion-label>\\n                        <ion-input type=\\\"text\\\" formControlName=\\\"school\\\"></ion-input>\\n                    </ion-item>\\n                    <small class=\\\"text-error\\\"\\n                        *ngIf=\\\"form.get('trainings')['controls'][i].get('school').invalid && (form.get('trainings')['controls'][i].get('school').dirty || form.get('trainings')['controls'][i].get('school').touched) \\\">\\n                        Champ obligatoire\\n                    </small>\\n                </div>\\n\\n                <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between\\\" fxLayoutGap=\\\"20px\\\">\\n                    <div fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\">\\n                        <ion-item class=\\\"custom-datetime w-100\\\">\\n                            <ion-label position=\\\"floating\\\">Année d’obtention <span class=\\\"required\\\">*</span></ion-label>\\n                            <ion-datetime placeholder=\\\"De\\\" displayFormat=\\\"YYYY\\\" pickerFormat=\\\"YYYY\\\"\\n                                formControlName=\\\"yearOfGraduation\\\">\\n                            </ion-datetime>\\n                        </ion-item>\\n                        <small class=\\\"text-error\\\"\\n                            *ngIf=\\\"form.get('trainings')['controls'][i].get('yearOfGraduation').invalid && (form.get('trainings')['controls'][i].get('yearOfGraduation').dirty || form.get('trainings')['controls'][i].get('yearOfGraduation').touched) \\\">\\n                            Champ obligatoire\\n                        </small>\\n                    </div>\\n\\n                    <div fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\">\\n                        <ion-item class=\\\"custom-input\\\">\\n                            <ion-label position=\\\"floating\\\">Lieu <span class=\\\"required\\\">*</span></ion-label>\\n                            <ion-input type=\\\"text\\\" formControlName=\\\"location\\\"></ion-input>\\n                        </ion-item>\\n                        <small class=\\\"text-error\\\"\\n                            *ngIf=\\\"form.get('trainings')['controls'][i].get('location').invalid && (form.get('trainings')['controls'][i].get('location').dirty || form.get('trainings')['controls'][i].get('location').touched) \\\">\\n                            Champ obligatoire\\n                        </small>\\n                    </div>\\n\\n                </div>\\n\\n                <div class=\\\"text-right mt-1\\\">\\n                    <ion-button fill=\\\"outline\\\" class=\\\"btn-outline-danger ml-30\\\" color=\\\"danger\\\"\\n                        *ngIf=\\\"form.controls['trainings']['controls'].length > 1\\\" (click)=\\\"removeField(i, 'trainings')\\\">\\n                        Supprimer\\n                    </ion-button>\\n                </div>\\n            </ng-container>\\n            <div class=\\\"text-left mt-1\\\">\\n                <ion-button fill=\\\"outline\\\" class=\\\"btn-outline\\\" color=\\\"primary\\\"\\n                    [disabled]=\\\"!form.controls.trainings || !form.controls.trainings.valid\\\"\\n                    (click)=\\\"addField('trainings')\\\">\\n                    <ion-icon slot=\\\"start\\\" name=\\\"add\\\"></ion-icon>\\n                    Ajouter une formation\\n                </ion-button>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"mt-2 mb-3 text-center\\\">\\n            <ion-button type=\\\"submit\\\" class=\\\"w-80\\\" color=\\\"primary\\\">\\n                Continuez\\n            </ion-button>\\n        </div>\\n    </form>\\n</div>\";","export default \"<div class=\\\"d-block\\\" appScrollToTop>\\n\\n    <div class=\\\"text-center mt-2\\\" *ngIf=\\\"(candidateService.percentage | async | number: '1.0-0')\\\">\\n        <p>\\n            Votre profil est complet à  {{ candidateService.percentage | async | number: '1.0-0' }} %.<br>\\n            Vous pouvez désormais swiper et rencontrer des recruteurs! \\n        </p>\\n    </div>\\n\\n    <div class=\\\"text-center mt-1\\\">\\n        <p class=\\\"px-0\\\">Complétez votre profil pour mieux matcher avec les recruteurs.</p>\\n        <p class=\\\"px-0\\\">Avec jobwinwin trouver le job qui vous correspond ! </p>\\n    </div>\\n\\n    <!-- <div class=\\\"progressbar mt-3\\\">\\n        <div class=\\\"porcent\\\" [ngStyle]=\\\"{'width': (candidateService.percentage | async | number: '1.0-0') + '%'}\\\">\\n            {{ candidateService.percentage | async | number: '1.0-0' }} %\\n        </div>\\n    </div> -->\\n\\n   \\n\\n    <div class=\\\"mt-3 text-center\\\">\\n        <ion-button class=\\\"w-80\\\" color=\\\"primary\\\" (click)=\\\"previewProfil()\\\">\\n            Prévisualisez votre profil\\n        </ion-button>\\n    </div>\\n\\n    <div class=\\\"mt-1 text-center\\\">\\n        <ion-button class=\\\"btn-win w-80\\\" color=\\\"primary\\\" (click)=\\\"onClear()\\\">\\n            <img src=\\\"./assets/icon/win-btn.svg\\\" alt=\\\"\\\">\\n        </ion-button>\\n    </div>\\n\\n</div>\\n\";","export default \"<div appScrollToTop>\\n    <form class=\\\"d-block\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSave()\\\">\\n        <div formGroupName=\\\"languages\\\">\\n            <div class=\\\"mt-1\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between\\\" fxLayoutGap=\\\"20px\\\">\\n    \\n                <ion-item class=\\\"custom-select w-100\\\" fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\" tabindex=\\\"0\\\">\\n                    <ion-label position=\\\"floating\\\">Langue</ion-label>\\n                    <ion-select class=\\\"w-100\\\" ok-text=\\\"Ok\\\" cancel-text=\\\"Annuler\\\" placeholder=\\\"Sélectionner\\\"\\n                        formControlName=\\\"language\\\">\\n                        <ion-select-option *ngFor=\\\"let item of globalService.languages | languages:languagesList\\\"\\n                            [value]=\\\"item._id\\\">\\n                            {{item.name}}\\n                        </ion-select-option>\\n                    </ion-select>\\n                </ion-item>\\n    \\n                <ion-item class=\\\"custom-select w-100\\\" fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\" tabindex=\\\"1\\\">\\n                    <ion-label position=\\\"floating\\\">Niveau de langue</ion-label>\\n                    <ion-select class=\\\"w-100\\\" ok-text=\\\"Ok\\\" cancel-text=\\\"Annuler\\\" placeholder=\\\"Sélectionner\\\"\\n                        formControlName=\\\"languageLevel\\\">\\n                        <ion-select-option *ngFor=\\\"let item of globalService.languagesLevels\\\" [value]=\\\"item._id\\\">\\n                            {{item.name}}\\n                        </ion-select-option>\\n                    </ion-select>\\n                </ion-item>\\n    \\n            </div>\\n            <small class=\\\"text-error\\\" *ngIf=\\\"languagesList <= 0\\\">\\n                Veuillez renseigner au moins une valeur et cliquer sur ajouter\\n            </small> \\n        </div>  \\n    \\n        <div class=\\\"mt-1 text-left\\\">\\n            <ion-button fill=\\\"outline\\\" class=\\\"btn-outline w-40\\\" color=\\\"primary\\\" tabindex=\\\"3\\\"\\n                [disabled]=\\\"!form.get('languages').get('language').value || !form.get('languages').get('languageLevel').value\\\"\\n                (click)=\\\"addLanguage()\\\">\\n                Ajouter\\n                <ion-icon slot=\\\"start\\\" name=\\\"add\\\"></ion-icon>\\n            </ion-button>\\n        </div>\\n        <div class=\\\"mb-1 mt-1\\\">\\n            <ul class=\\\"customList\\\">\\n                <li *ngFor=\\\"let item of languagesList;let i =index;\\\">\\n                    <span class=\\\"text-primary text-left\\\">{{ item.language.name }} : {{ item.languageLevel.name }}</span>\\n                    <mat-icon class=\\\"cursor-pointer btn-round vertical-align ml-1\\\" (click)=\\\"deleteLanguage(i)\\\">\\n                        close</mat-icon><br>\\n                </li>\\n            </ul>\\n        </div>\\n    \\n        <div class=\\\"mb-1\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between\\\" fxLayoutGap=\\\"20px\\\"\\n            formGroupName=\\\"programingLanguages\\\">\\n            <div fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\">\\n                <app-multi-select label=\\\"Langages informatiques\\\" collection=\\\"programmingLanguages\\\"\\n                    formControlName=\\\"language\\\"></app-multi-select>\\n                <small class=\\\"text-error\\\" *ngIf=\\\"form.get('programingLanguages.language').value?.length <= 0\\\">\\n                    Champ obligatoire\\n                </small>\\n            </div>\\n            <div fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\">\\n                <app-multi-select label=\\\"Logiciels informatiques\\\" collection=\\\"logiciels\\\" formControlName=\\\"logiciel\\\">\\n                </app-multi-select>\\n                <small class=\\\"text-error\\\" *ngIf=\\\"form.get('programingLanguages.logiciel').value?.length <= 0\\\">\\n                    Champ obligatoire\\n                </small>\\n            </div>\\n        </div>\\n    \\n        <app-file-uploader [data]=\\\"{ file: candidateService.candidate['cv'], type: 'simple-cv' }\\\"\\n            (fileChanges)=\\\"fileChanges($event)\\\">\\n        </app-file-uploader>\\n    \\n        <div class=\\\"custom-input-icon\\\">\\n            <ion-icon class=\\\"align-middle\\\" src=\\\"./assets/icon/website-input.svg\\\"></ion-icon>\\n            <mat-form-field class=\\\"ml-1 w-90\\\">\\n                <mat-label>Site internet</mat-label>\\n                <input matInput placeholder=\\\"\\\" formControlName=\\\"webSite\\\">\\n                <span matPrefix>www.</span>\\n            </mat-form-field>\\n        </div>\\n        \\n        <div class=\\\"custom-input-icon\\\">\\n            <ion-icon class=\\\"align-middle\\\" src=\\\"./assets/icon/blogger-input.svg\\\"></ion-icon>\\n            <mat-form-field class=\\\"ml-1 w-90\\\">\\n                <mat-label>Blog</mat-label>\\n                <input matInput placeholder=\\\"\\\" formControlName=\\\"blog\\\">\\n                <span matPrefix>www.</span>\\n            </mat-form-field>\\n        </div>\\n\\n        <div class=\\\"custom-input-icon\\\">\\n            <ion-icon class=\\\"align-middle\\\" src=\\\"./assets/icon/linkedin-input.svg\\\"></ion-icon>\\n            <mat-form-field class=\\\"ml-1 w-90\\\">\\n                <mat-label>Profil linkedin</mat-label>\\n                <input matInput placeholder=\\\"Insérer le lien de votre profil Linkedin\\\" formControlName=\\\"linkedin\\\">\\n            </mat-form-field>\\n        </div>\\n\\n        <div class=\\\"custom-input-icon\\\">\\n            <ion-icon class=\\\"align-middle\\\" src=\\\"./assets/icon/instagram-input.svg\\\"></ion-icon>\\n            <mat-form-field class=\\\"ml-1 w-90\\\">\\n                <mat-label>Instagram</mat-label>\\n                <input matInput placeholder=\\\"\\\" formControlName=\\\"instagram\\\">\\n                <span matPrefix>@</span>\\n            </mat-form-field>\\n        </div>\\n\\n        <div class=\\\"custom-input-icon\\\">\\n            <ion-icon class=\\\"align-middle\\\" src=\\\"./assets/icon/twitter-input.svg\\\"></ion-icon>\\n            <mat-form-field class=\\\"ml-1 w-90\\\">\\n                <mat-label>Twitter</mat-label>\\n                <input matInput placeholder=\\\"\\\" formControlName=\\\"twitter\\\">\\n                <span matPrefix>@</span>\\n            </mat-form-field>\\n        </div>\\n\\n        <div class=\\\"custom-input-icon\\\">\\n            <ion-icon class=\\\"align-middle\\\" src=\\\"./assets/icon/facebook-input.svg\\\"></ion-icon>\\n            <mat-form-field class=\\\"ml-1 w-90\\\">\\n                <mat-label>Facebook</mat-label>\\n                <input matInput placeholder=\\\"\\\" formControlName=\\\"facebook\\\">\\n            </mat-form-field>\\n        </div>\\n    \\n        <div class=\\\"mt-2 mb-3 text-center\\\">\\n            <ion-button type=\\\"submit\\\" class=\\\"w-80\\\" color=\\\"primary\\\" [disabled]=\\\"languagesList.length <= 0\\n            || form.get('programingLanguages.logiciel').value?.length <= 0\\n            || form.get('programingLanguages.language').value?.length <= 0 || !form.valid\\\">\\n            \\n                Continuez\\n            </ion-button>\\n        </div>\\n    \\n    </form>\\n</div>\";","export default \"<div appScrollToTop>\\n    <form class=\\\"d-block\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSave()\\\">\\n\\n        <div class=\\\"w-100\\\">\\n            <ion-item class=\\\"custom-input\\\">\\n                <ion-label position=\\\"floating\\\">Poste souhaité <span class=\\\"required\\\">*</span></ion-label>\\n                <ion-input type=\\\"text\\\" formControlName=\\\"searchedPost\\\"></ion-input>\\n            </ion-item>\\n            <small class=\\\"text-error\\\"\\n                *ngIf=\\\"form.get('searchedPost').invalid && (form.get('searchedPost').dirty || form.get('searchedPost').touched) \\\">\\n                Champ obligatoire\\n            </small>\\n        </div>\\n\\n        <!-- <div class=\\\"mt-1\\\">\\n            <ng-multiselect-dropdown label=\\\"aaaaa\\\" [placeholder]=\\\"'Intitulés d\\\\'usage'\\\" [settings]=\\\"dropdownSettings\\\"\\n                [data]=\\\"globalService.usageTitles\\\" formControlName=\\\"usageTitles\\\"\\n                (onSelect)=\\\"onItemSelect($event)\\\" (onDeSelect)=\\\"OnItemDeSelect($event)\\\">\\n            </ng-multiselect-dropdown>\\n        </div> -->\\n\\n        <div>\\n            <app-multi-select label=\\\"Intitulés d'usage\\\" collection=\\\"usageTitles\\\" formControlName=\\\"usageTitles\\\">\\n            </app-multi-select>\\n            <small class=\\\"text-error\\\" *ngIf=\\\"!form.get('usageTitles').value?.length\\\">\\n                Champ obligatoire\\n            </small>\\n        </div>\\n\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between\\\" fxLayoutGap=\\\"20px\\\">\\n            <div class=\\\"w-100\\\" fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\">\\n                <app-multi-select label=\\\"Type de contrat\\\" collection=\\\"contracts\\\" formControlName=\\\"contracts\\\">\\n                </app-multi-select>\\n                <small class=\\\"text-error\\\" *ngIf=\\\"!form.get('contracts').value?.length\\\">\\n                    Veuillez choisir au moins un type de contrat.\\n                </small>\\n            </div>\\n            <div class=\\\"w-100\\\" fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\">\\n                <ion-item class=\\\"custom-select\\\">\\n                    <ion-label position=\\\"floating\\\">Type de Poste <span class=\\\"required\\\">*</span></ion-label>\\n                    <ion-select class=\\\"w-100\\\" ok-text=\\\"Ok\\\" cancel-text=\\\"Annuler\\\" placeholder=\\\"Sélectionner\\\"\\n                        formControlName=\\\"jobType\\\">\\n                        <ion-select-option *ngFor=\\\"let item of globalService.jobTypes\\\" [value]=\\\"item._id\\\">\\n                            {{item.name}}</ion-select-option>\\n                    </ion-select>\\n                </ion-item>\\n                <small class=\\\"text-error\\\"\\n                    *ngIf=\\\"form.get('jobType').invalid && (form.get('jobType').dirty || form.get('jobType').touched) \\\">\\n                    Champ obligatoire\\n                </small>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"w-100\\\">\\n            <app-multi-select label=\\\"Fonction\\\" collection=\\\"functions\\\" formControlName=\\\"functions\\\"></app-multi-select>\\n            <small class=\\\"text-error\\\" *ngIf=\\\"!form.get('functions').value?.length\\\">\\n                Veuillez choisir au moins une fonction.\\n            </small>\\n        </div>\\n\\n        <div class=\\\"w-100\\\">\\n            <app-multi-select label=\\\"Secteur d’activité \\\" collection=\\\"activitySectors\\\" formControlName=\\\"activitySector\\\">\\n            </app-multi-select>\\n            <small class=\\\"text-error\\\" *ngIf=\\\"!form.get('activitySector').value?.length\\\">\\n                Veuillez choisir au moins un secteur d’activité.\\n            </small>\\n        </div>\\n\\n        <div class=\\\"w-100\\\">\\n            <ion-item class=\\\"custom-select w-100 \\\">\\n                <ion-label position=\\\"floating\\\">Mode de travail <span class=\\\"required\\\">*</span></ion-label>\\n                <ion-select class=\\\"w-100\\\" ok-text=\\\"Ok\\\" cancel-text=\\\"Annuler\\\" placeholder=\\\"Sélectionner\\\"\\n                    formControlName=\\\"jobMode\\\">\\n                    <ion-select-option *ngFor=\\\"let item of globalService.jobModes\\\" [value]=\\\"item._id\\\">\\n                        {{item.name}}</ion-select-option>\\n                </ion-select>\\n            </ion-item>\\n            <small class=\\\"text-error\\\"\\n                *ngIf=\\\"form.get('jobMode').invalid && (form.get('jobMode').dirty || form.get('jobMode').touched) \\\">\\n                Champ obligatoire\\n            </small>\\n        </div>\\n\\n        <div class=\\\"w-100\\\">\\n            <app-multi-select label=\\\"Lieu\\\" collection=\\\"locations\\\" formControlName=\\\"locations\\\"></app-multi-select>\\n            <small class=\\\"text-error\\\" *ngIf=\\\"!form.get('locations').value?.length\\\">\\n                Veuillez choisir au moins une ville.\\n            </small>\\n        </div>\\n\\n        <h4 class=\\\"pt-2\\\">Prétentions salariales (Dhs)</h4>\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between\\\" fxLayoutGap=\\\"20px\\\">\\n            <div class=\\\"w-100\\\" fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\">\\n                <ion-item class=\\\"custom-input\\\">\\n                    <ion-label position=\\\"floating\\\">À partir de <span class=\\\"required\\\">*</span></ion-label>\\n                    <ion-input type=\\\"number\\\" formControlName=\\\"supposedSalaryMin\\\"></ion-input>\\n                </ion-item>\\n                <small class=\\\"text-error\\\"\\n                    *ngIf=\\\"form.get('supposedSalaryMin').invalid && (form.get('supposedSalaryMin').dirty || form.get('supposedSalaryMin').touched) \\\">\\n                    Champ obligatoire\\n                </small>\\n            </div>\\n\\n            <div class=\\\"w-100\\\" fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\">\\n                <ion-item class=\\\"custom-input\\\">\\n                    <ion-label position=\\\"floating\\\">Jusqu'à <span class=\\\"required\\\">*</span></ion-label>\\n                    <ion-input type=\\\"number\\\" formControlName=\\\"supposedSalaryMax\\\"></ion-input>\\n                </ion-item>\\n                <small class=\\\"text-error\\\"\\n                    *ngIf=\\\"form.get('supposedSalaryMax').invalid && (form.get('supposedSalaryMax').dirty || form.get('supposedSalaryMax').touched) \\\">\\n                    Champ obligatoire\\n                </small>\\n            </div>\\n\\n        </div>\\n        <small class=\\\"text-error\\\" *ngIf=\\\"form.get('supposedSalaryMax').touched && !form.get('supposedSalaryMax').hasError('required') \\n        && form.hasError('salaryErreur')\\\">\\n            Le salaire maximum doit être supérieur au salaire minimum\\n        </small>\\n\\n        <div class=\\\"mt-2 mb-3 text-center\\\">\\n            <ion-button type=\\\"submit\\\" class=\\\"w-80\\\" color=\\\"primary\\\" [disabled]=\\\"!form.valid\\n            || form.get('usageTitles').value?.length <= 0\\n            || form.get('contracts').value?.length <= 0\\n            || form.get('functions').value?.length <= 0\\n            || form.get('activitySector').value?.length <= 0\\n            || form.get('locations').value?.length <= 0\\n            \\\">\\n                Continuez\\n            </ion-button>\\n        </div>\\n    </form>\\n</div>\";","export default \"<ion-header class=\\\"steps-header ion-no-border\\\" mode=\\\"md\\\">\\n    <ion-toolbar class=\\\"steps-toolbar\\\">\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-button class=\\\"roundbutton p-0\\\" (click)=\\\"back()\\\">\\n                <ion-icon src=\\\"./assets/icon/arrow-back.svg\\\"></ion-icon>\\n            </ion-button>\\n        </ion-buttons>\\n        <ion-buttons slot=\\\"secondary\\\">\\n            <ion-button (click)=\\\"desconnect()\\\">\\n                <ion-icon src=\\\"./assets/icon/deconnexion-white.svg\\\"></ion-icon>\\n            </ion-button>\\n        </ion-buttons>\\n        <ion-title class=\\\"page-title\\\">\\n            <h1 class=\\\"title mb-0\\\">{{pageTitle}}</h1>\\n        </ion-title>\\n    </ion-toolbar>\\n    <div class=\\\"progressbar w-100\\\">\\n        <div class=\\\"porcent\\\" [ngStyle]=\\\"{'width': (candidateService.percentage | async | number: '1.0-0') + '%'}\\\">\\n            <div class=\\\"counter text-center\\\">\\n                {{ candidateService.percentage | async | number: '1.0-0' }} %\\n             </div>\\n        </div>\\n    </div>\\n</ion-header>\\n<ion-content [fullscreen]=\\\"true\\\" class=\\\"forms\\\">\\n    <section class=\\\"steps-content mt-1\\\">\\n        <div class=\\\"page-content\\\">\\n           <router-outlet></router-outlet>\\n        </div>\\n    </section>\\n</ion-content>\";","export default \"<div appScrollToTop>\\n  <form class=\\\"d-block\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSave()\\\">\\n\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between\\\" fxLayoutGap=\\\"20px\\\">\\n      <div class=\\\"w-100\\\" fxLayout=\\\"column\\\" fxFlex.xs=\\\"100%\\\">\\n        <ion-item class=\\\"custom-input\\\">\\n          <ion-label position=\\\"floating\\\">Nom <span class=\\\"required\\\">*</span></ion-label>\\n          <ion-input type=\\\"text\\\" formControlName=\\\"lastName\\\"></ion-input>\\n        </ion-item>\\n        <small class=\\\"text-error\\\"\\n          *ngIf=\\\"form.get('lastName').invalid && (form.get('lastName').dirty || form.get('lastName').touched) \\\">\\n          Champ obligatoire\\n        </small>\\n      </div>\\n\\n      <div class=\\\"w-100\\\" fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\">\\n        <ion-item class=\\\"custom-input\\\">\\n          <ion-label position=\\\"floating\\\">Prénom <span class=\\\"required\\\">*</span></ion-label>\\n          <ion-input type=\\\"text\\\" formControlName=\\\"firstName\\\"></ion-input>\\n        </ion-item>\\n        <small class=\\\"text-error\\\"\\n          *ngIf=\\\"form.get('firstName').invalid && (form.get('firstName').dirty || form.get('firstName').touched) \\\">\\n          Champ obligatoire\\n        </small>\\n      </div>\\n    </div>\\n\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between\\\" fxLayoutGap=\\\"20px\\\">\\n      <div class=\\\"w-100\\\" fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\">\\n        <ion-item class=\\\"custom-datetime\\\">\\n          <ion-label position=\\\"floating\\\">Date Naissance <span class=\\\"required\\\">*</span></ion-label>\\n          <ion-datetime placeholder=\\\"Choissez votre date\\\" formControlName=\\\"birthday\\\">\\n          </ion-datetime>\\n        </ion-item>\\n        <small class=\\\"text-error\\\"\\n          *ngIf=\\\"form.get('birthday').invalid && (form.get('birthday').dirty || form.get('birthday').touched) \\\">\\n          Champ obligatoire\\n        </small>\\n      </div>\\n\\n      <div class=\\\"w-100\\\" fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\">\\n        <ion-item class=\\\"custom-select\\\">\\n          <ion-label position=\\\"floating\\\">Sexe <span class=\\\"required\\\">*</span></ion-label>\\n          <ion-select class=\\\"w-100\\\" ok-text=\\\"Ok\\\" cancel-text=\\\"Annuler\\\" placeholder=\\\"Sélectionner\\\"\\n            formControlName=\\\"gender\\\">\\n            <ion-select-option value=\\\"masculin\\\">Homme</ion-select-option>\\n            <ion-select-option value=\\\"feminin\\\">Femme</ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n        <small class=\\\"text-error\\\"\\n          *ngIf=\\\"form.get('gender').invalid && (form.get('gender').dirty || form.get('gender').touched) \\\">\\n          Champ obligatoire\\n        </small>\\n      </div>\\n    </div>\\n\\n\\n\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between\\\" fxLayoutGap=\\\"20px\\\">\\n      <div class=\\\"w-100\\\" fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\">\\n        <div class=\\\"w-100 custom-input\\\">\\n          <ion-item class=\\\"custom-input\\\">\\n            <ion-label position=\\\"floating\\\">Téléphone (+212) <span class=\\\"required\\\">*</span></ion-label>\\n            <ion-input type=\\\"tel\\\" formControlName=\\\"phoneNumber\\\"></ion-input>\\n          </ion-item>\\n        </div>\\n        <small class=\\\"text-error\\\"\\n          *ngIf=\\\"form.get('phoneNumber').invalid && (form.get('phoneNumber').dirty || form.get('phoneNumber').touched) \\\">\\n          Champ obligatoire\\n        </small>\\n      </div>\\n\\n      <div class=\\\"w-100\\\" fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\">\\n        <ion-item class=\\\"custom-select w-100\\\">\\n          <ion-label position=\\\"floating\\\">Disponiblité <span class=\\\"required\\\">*</span></ion-label>\\n          <ion-select class=\\\"w-100\\\" ok-text=\\\"Ok\\\" cancel-text=\\\"Annuler\\\" placeholder=\\\"Sélectionner\\\"\\n            formControlName=\\\"availability\\\">\\n            <ion-select-option *ngFor=\\\"let item of globalService.availabilities\\\" [value]=\\\"item._id\\\">\\n              {{item.name}}\\n            </ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n        <small class=\\\"text-error\\\"\\n          *ngIf=\\\"form.get('availability').invalid && (form.get('availability').dirty || form.get('availability').touched) \\\">\\n          Champ obligatoire\\n        </small>\\n      </div>\\n    </div>\\n\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between\\\">\\n      <div class=\\\"w-100\\\" fxLayout=\\\"column\\\" fxFlex.xs=\\\"100%\\\">\\n        <ion-item class=\\\"custom-select w-100\\\">\\n          <ion-label position=\\\"floating\\\">Nombre d’années d’experience <span class=\\\"required\\\">*</span></ion-label>\\n          <ion-select class=\\\"w-100\\\" ok-text=\\\"Ok\\\" cancel-text=\\\"Annuler\\\" placeholder=\\\"Sélectionner\\\"\\n            formControlName=\\\"experienceYears\\\">\\n            <ion-select-option *ngFor=\\\"let item of globalService.experiences\\\" [value]=\\\"item._id\\\">\\n              {{item.name}}\\n            </ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n        <small class=\\\"text-error\\\"\\n          *ngIf=\\\"form.get('experienceYears').invalid && (form.get('experienceYears').dirty || form.get('experienceYears').touched) \\\">\\n          Champ obligatoire\\n        </small>\\n      </div>\\n    </div>\\n\\n    <ion-item class=\\\"custom-input w-100\\\">\\n      <ion-label position=\\\"floating\\\">Poste actuel <span class=\\\"required\\\">*</span></ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"currentJob\\\"></ion-input>\\n    </ion-item>\\n    <small class=\\\"text-error\\\"\\n      *ngIf=\\\"form.get('currentJob').invalid && (form.get('currentJob').dirty || form.get('currentJob').touched) \\\">\\n      Champ obligatoire\\n    </small>\\n\\n\\n    <ion-item class=\\\"custom-input w-100\\\">\\n      <ion-label position=\\\"floating\\\">Préciser salaire actuel (Dhs) <span class=\\\"required\\\">*</span></ion-label>\\n      <ion-input type=\\\"number\\\" formControlName=\\\"currentSalary\\\"></ion-input>\\n    </ion-item>\\n    <small class=\\\"text-error\\\"\\n      *ngIf=\\\"form.get('currentSalary').invalid && (form.get('currentSalary').dirty || form.get('currentSalary').touched) \\\">\\n      Champ obligatoire\\n    </small>\\n\\n\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between\\\" fxLayoutGap=\\\"20px\\\">\\n      <div class=\\\"w-100\\\" fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\">\\n        <ion-item class=\\\"custom-select w-100\\\">\\n          <ion-label position=\\\"floating\\\">Niv. managérial <span class=\\\"required\\\">*</span></ion-label>\\n          <ion-select class=\\\"w-100\\\" ok-text=\\\"Ok\\\" cancel-text=\\\"Annuler\\\" placeholder=\\\"Sélectionner\\\"\\n            formControlName=\\\"managerialLevel\\\">\\n            <ion-select-option *ngFor=\\\"let item of globalService.managerialLevels\\\" [value]=\\\"item._id\\\">\\n              {{item.name}}\\n            </ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n        <small class=\\\"text-error\\\"\\n          *ngIf=\\\"form.get('managerialLevel').invalid && (form.get('managerialLevel').dirty || form.get('managerialLevel').touched) \\\">\\n          Champ obligatoire\\n        </small>\\n      </div>\\n\\n      <div class=\\\"w-100\\\" fxLayout=\\\"column\\\" fxFlex.xs=\\\"45%\\\">\\n        <ion-item class=\\\"custom-select w-100\\\">\\n          <ion-label position=\\\"floating\\\">Effectif Géré <span class=\\\"required\\\">*</span></ion-label>\\n          <ion-select class=\\\"w-100\\\" ok-text=\\\"Ok\\\" cancel-text=\\\"Annuler\\\" placeholder=\\\"Sélectionner\\\"\\n            formControlName=\\\"effective\\\">\\n            <ion-select-option *ngFor=\\\"let item of globalService.effectives\\\" [value]=\\\"item._id\\\">\\n              {{item.name}}\\n            </ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n        <small class=\\\"text-error\\\"\\n          *ngIf=\\\"form.get('effective').invalid && (form.get('effective').dirty || form.get('effective').touched) \\\">\\n          Champ obligatoire\\n        </small>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"w-100 mt-1\\\">\\n      <mat-form-field class=\\\"w-100\\\">\\n        <mat-label>Objectif <span class=\\\"required\\\">*</span></mat-label>\\n        <textarea matInput placeholder=\\\"Mission générale\\\" matTextareaAutosize matAutosizeMinRows=1 matAutosizeMaxRows=7\\n          formControlName=\\\"goal\\\"></textarea>\\n      </mat-form-field>\\n      <small class=\\\"text-error\\\"\\n        *ngIf=\\\"form.get('goal').invalid && (form.get('goal').dirty || form.get('goal').touched) \\\">\\n        Champ obligatoire\\n      </small>\\n    </div>\\n\\n    <div class=\\\"mt-3 text-center\\\">\\n      <ion-button type=\\\"submit\\\" class=\\\"w-80\\\" color=\\\"primary\\\" [disabled]=\\\"!form.valid\\\">\\n        Continuez\\n      </ion-button>\\n    </div>\\n\\n  </form>\\n</div>\";","export default \"<ion-content class=\\\"file-dashboard\\\">\\n    <ion-header class=\\\"ion-no-border py-2\\\" mode=\\\"md\\\">\\n        <ion-toolbar>\\n            <ion-buttons routerLink=\\\"/dashboard/profile/values\\\" routerDirection=\\\"root\\\" class=\\\"roundbutton\\\" slot=\\\"start\\\">\\n                <ion-icon src=\\\"./assets/icon/arrow-back.svg\\\"></ion-icon>\\n            </ion-buttons>\\n            <ion-title class=\\\"text-center\\\">{{ authService.user.firstName }} {{ authService.user.lastName }}</ion-title>\\n        </ion-toolbar>\\n        <div class=\\\"d-block text-center\\\">\\n            <img src=\\\"./assets/icon/space-title.svg\\\" alt=\\\"\\\">\\n            <p class=\\\"short-desc mb-0\\\">\\n                J’ai pu constater que nous avons fréquenté le même\\n                établissement. Ce serait un plaisir de pouvoir évoquer ce sujet et d’autres autour d’une\\n                activité.\\n            </p>\\n            <img src=\\\"./assets/icon/space-title.svg\\\" alt=\\\"\\\">\\n            <div class=\\\"profil-files\\\">\\n                <img src=\\\"./assets/img/female.svg\\\" alt=\\\"\\\" class=\\\"w-100\\\">\\n            </div>\\n        </div>\\n    </ion-header>\\n\\n    <ion-slides class=\\\"files-slide\\\">\\n        <ion-slide>\\n            <div class=\\\"position-relative mt-1 mb-3\\\">\\n                <button class=\\\"position-absolute arrow-right cursor-pointer bg-transparent\\\"><img\\n                        src=\\\"./assets/icon/arrow-right.svg\\\" alt=\\\"\\\"></button>\\n                <div class=\\\"custom-fields text-center\\\">\\n                    <span>{{ candidateService.candidate.currentJob }}</span>\\n                </div>\\n\\n                <div class=\\\"custom-fields text-center\\\">\\n                    <div class=\\\"d-inline w-40 text-center mr-1 mt-2\\\">{{ candidateService.candidate.currentLocation }}</div>\\n                    <div class=\\\"d-inline w-40 text-center mt-2\\\">{{ candidateService.candidate.experienceYears }} ans d’expérience</div>\\n                </div>\\n\\n                <h3 class=\\\"objectif\\\">OBJECTIFS ACTUELS</h3>\\n\\n                <div class=\\\"custom-fields text-center mt-2\\\">\\n                    <span>{{ candidateService.candidate.goal }} </span>\\n                </div>\\n                <div class=\\\"custom-fields text-center\\\">\\n                    <div class=\\\"d-inline w-40 text-center mr-1 mt-2\\\">{{ candidateService.candidate.location }}</div>\\n                    <div class=\\\"d-inline w-40 text-center\\\">{{ candidateService.candidate.supposedSalaryMax }} DH</div>\\n                </div>\\n            </div>\\n        </ion-slide>\\n\\n        <ion-slide class=\\\"mb-3\\\">\\n            <div class=\\\"position-relative mt-1 py-2\\\">\\n                <button class=\\\"position-absolute arrow-left cursor-pointer bg-transparent\\\"><img\\n                        src=\\\"./assets/icon/arrow-left.svg\\\" alt=\\\"\\\"></button>\\n                <button class=\\\"position-absolute arrow-right cursor-pointer bg-transparent\\\"><img\\n                        src=\\\"./assets/icon/arrow-right.svg\\\" alt=\\\"\\\"></button>\\n\\n                <h3 class=\\\"objectif\\\">CV- RÉSUMÉ</h3>\\n\\n                <div class=\\\"text-center mt-2\\\">\\n                    <img class=\\\"w-100\\\" src=\\\"./assets/img/default-video.svg\\\" alt=\\\"Add Video\\\">\\n                </div>\\n\\n                <div class=\\\"matching-card-details mt-2\\\" style=\\\"height: 50px;\\\">\\n                    <h3 class=\\\"title\\\">\\n                        <mat-icon>subject</mat-icon>\\n                        <span>CV</span>\\n                        <mat-icon class=\\\"float-right\\\">save_alt</mat-icon>\\n                    </h3>\\n                </div>\\n\\n                <div class=\\\"matching-card-details mt-2\\\">\\n                    <h3 class=\\\"title\\\">\\n                        <mat-icon>mediation</mat-icon>\\n                        <span>EXPÉRIENCE</span>\\n                    </h3>\\n                    <span class=\\\"desc\\\">\\n                        <ul class=\\\"list\\\">\\n                            <li>Actuellement : Directrice Générale</li>\\n                            <li>2005-2011 : Responsable de marketing</li>\\n                            <li>2000-2005 : Responsable commerciale.</li>\\n                        </ul>\\n                    </span>\\n                </div>\\n\\n                <div class=\\\"matching-card-details mt-2\\\">\\n                    <h3 class=\\\"title\\\">\\n                        <mat-icon>school</mat-icon>\\n                        <span>FORMATION</span>\\n                    </h3>\\n                    <span class=\\\"desc\\\">\\n                        <ul class=\\\"list\\\">\\n                            <li *ngFor=\\\"let item of candidate.candidate.trainings\\\">{{ item.yearOfGraduation }} : {{ item.studyLevel }} en {{ item.typeOfTraining }}</li>\\n                        </ul>\\n                    </span>\\n                </div>\\n\\n                <div class=\\\"matching-card-details mt-2\\\">\\n                    <h3 class=\\\"title\\\">\\n                        <mat-icon>g_translate</mat-icon>\\n                        <span>LANGUE</span>\\n                    </h3>\\n                    <span class=\\\"desc\\\">\\n                        <ul class=\\\"list\\\">\\n                            <li *ngFor=\\\"let item of candidate.languages\\\">{{ item.language }} : {{ item.languageLevel }}</li>\\n                        </ul>\\n                    </span>\\n                </div>\\n\\n            </div>\\n        </ion-slide>\\n\\n        <ion-slide>\\n            <div class=\\\"position-relative py-2 mt-1 mb-3\\\">\\n                <div class=\\\"d-block text-center\\\">\\n                    <h3 class=\\\"objectif\\\">MES COMPÉTENCES</h3>\\n                </div>\\n                <button class=\\\"position-absolute arrow-left cursor-pointer bg-transparent\\\"><img\\n                    src=\\\"./assets/icon/arrow-left.svg\\\" alt=\\\"\\\"></button>\\n\\n                <div class=\\\"matching-card-details\\\">\\n                    <div class=\\\"desc\\\">\\n                        <ul class=\\\"list\\\">\\n                            <li *ngFor=\\\"let item of candidate.skills\\\">\\n                                {{item.softSkill}}\\n                                <!-- <span class=\\\"float-right\\\">Expert</span> -->\\n                            </li>\\n                        </ul>\\n                    </div>\\n                </div>\\n\\n                <h3 class=\\\"objectif\\\">MES VALEURS</h3>\\n\\n                <div class=\\\"matching-card-details mt-2\\\">\\n                    <div class=\\\"desc\\\">\\n                        <ul class=\\\"list\\\">\\n                            <li *ngFor=\\\"let item of candidate.values\\\">{{ item.value }}</li>\\n                        </ul>\\n                    </div>\\n                </div>\\n            </div>\\n        </ion-slide>\\n    </ion-slides>\\n\\n</ion-content>\";","export default \"<div appScrollToTop>\\n  <div class=\\\"text-center mt-2\\\">\\n    <h1 class=\\\"title\\\">Présentez vous en vidéo <br> aux recruteurs ! </h1>\\n  </div>\\n  <app-file-uploader [data]=\\\"value\\\" (fileChanges)=\\\"fileChanges($event)\\\"></app-file-uploader>\\n  <div class=\\\"mt-3 text-center\\\">\\n    <ion-button class=\\\"w-80\\\" color=\\\"primary\\\" (click)=\\\"onSave()\\\">Continuez\\n    </ion-button>\\n  </div>\\n</div>\";","export default \"<div appScrollToTop>\\n    <form class=\\\"d-block\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSave()\\\">\\n        <div class=\\\"text-center mt-2\\\">\\n            <p> Vos softskills sont très importants pour les recruteurs.\\n                Choisissez dans la liste les 5 softskills qui vous représentent le plus.\\n            </p>\\n        </div>\\n        <app-multi-select label=\\\"Mes soft skills\\\" [limit]=\\\"5\\\" collection=\\\"softSkills\\\" formControlName=\\\"skills\\\">\\n        </app-multi-select>\\n        <div class=\\\"text-center mt-2\\\">\\n            <p>En recrutement une valeur est parfois plus\\n                décisive qu’une compétence.\\n                Renforcer la qualité de votre profil en\\n                séléctionnant dans la liste les 6 valeurs qui vous\\n                correspondent</p>\\n        </div>\\n        <app-multi-select label=\\\"Mes valeurs\\\" [limit]=\\\"6\\\" collection=\\\"values\\\" formControlName=\\\"values\\\">\\n        </app-multi-select>\\n\\n        <div class=\\\"mt-2 text-center\\\">\\n            <ion-button type=\\\"submit\\\" class=\\\"w-80\\\" color=\\\"primary\\\"\\n                [disabled]=\\\"form.get('values').value?.length < 6 ||  form.get('skills').value?.length < 5 ? true : false\\\">\\n                Validez\\n            </ion-button>\\n        </div>\\n    </form>\\n</div>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Byb2ZpbC9jb21wb25lbnRzL2FkZC1wcm9maWwvYWRkLXByb2ZpbC5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, OnInit, NgZone } from '@angular/core';\nimport { ActionSheetController, LoadingController } from '@ionic/angular';\nimport { ToastService } from 'src/app/core/services/addapters/toast.service';\nimport { FileService } from 'src/app/core/services/crud/file.service';\nimport { CandidateService } from 'src/app/core/services/crud/candidate.service';\nimport { TransService } from 'src/app/core/services/addapters/trans.service';\nimport { PictureUtilsService } from 'src/app/core/services/global/picture-utils.service';\nimport { AuthService } from 'src/app/core/services/global/auth.service';\nimport { Redirection, Helper } from 'src/app/core/utils';\n\n@Component({\n  selector: 'app-add-profil',\n  templateUrl: './add-profil.component.html',\n  styleUrls: ['./add-profil.component.scss'],\n})\nexport class AddProfilComponent implements OnInit {\n\n  hasChanged = false;\n  userPicture;\n  oldPercentage = 0;\n\n  constructor(public authService: AuthService, private actionSheetController: ActionSheetController, private loadingController: LoadingController,\n              private pictureUtilsService: PictureUtilsService, private zone: NgZone, private toastService: ToastService,\n              private fileService: FileService, public candidateService: CandidateService, private trans: TransService) { }\n\n  ngOnInit() {\n    const value = { picture: this.authService.user.picture };\n    this.oldPercentage = Helper.calculePercentage(value, 0, 1.96);\n  }\n\n  /**\n   * add image\n   */\n  async addImageAction() {\n    const actionSheet = await this.actionSheetController.create({\n      header: 'Image',\n      // cssClass: 'my-actionSheet',\n      buttons: [\n        {\n          text: 'Camera',\n          icon: 'camera',\n          handler: async () => {\n            let syncing = true;\n            setTimeout(() => {\n              if (syncing) {\n                syncing = false;\n                loading.dismiss();\n                this.toastService.error('Connection error');\n                return;\n              }\n            }, 30000);\n            const loading = await this.loadingController.create({});\n            await loading.present();\n            this.pictureUtilsService.uploadFromCamera().then(\n              ({ imageData }) => {\n                this.zone.run(() => {\n                  this.hasChanged = true;\n                  this.fileService.create(imageData, true).subscribe(res => {\n                    this.candidateService.candidate['picture'] = res.file;\n                    this.authService.user.picture = res.file;\n                  });\n                });\n                syncing = false;\n                loading.dismiss();\n              },\n              _error => {\n                syncing = false;\n                loading.dismiss();\n              }\n            );\n            return syncing;\n          }\n        },\n        {\n          text: 'Gallery',\n          icon: 'image',\n          handler: async () => {\n            let syncing = true;\n            setTimeout(() => {\n              if (syncing) {\n                syncing = false;\n                loading.dismiss();\n                this.toastService.error('Connection error');\n                return;\n              }\n            }, 30000);\n            const loading = await this.loadingController.create({});\n            await loading.present();\n            this.pictureUtilsService.uploadFromGallery().then(\n              ({ imageData }) => {\n                this.zone.run(() => {\n                  this.hasChanged = true;\n                  this.fileService.create(imageData, true).subscribe(res => {\n                    this.candidateService.candidate['picture'] = res.file;\n                    this.authService.user.picture = res.file;\n                  });\n                });\n                syncing = false;\n                loading.dismiss();\n              },\n              _error => {\n                alert(_error);\n                syncing = false;\n                loading.dismiss();\n              }\n            );\n            return syncing;\n          }\n        }\n      ]\n    });\n    await actionSheet.present();\n  }\n\n  /**\n   * save picture\n   */\n  onSave() {\n    let value = { picture: this.authService.user.picture };\n    let percentage = Helper.calculePercentage(value, (this.authService.user.percentage ? Number(this.authService.user.percentage) : 0) - Number(this.oldPercentage), 1.96);\n    console.log('New percent : ', percentage);\n    this.candidateService.changeInfos(Object.assign(value, {\n      percentage: (Math.round(percentage * 100) / 100).toFixed(2),\n      currentStep: 2\n    })).subscribe(res => {\n      console.log(res);\n      this.candidateService.candidate = res;\n      this.authService.user = res;\n      this.candidateService.setPercentage(this.candidateService.candidate.percentage);\n      Redirection.jobInfo();\n    });\n    // if (this.authService.user.picture) {\n    //   let value = { picture: this.authService.user.picture };\n    //   let percentage = Helper.calculePercentage(value, (this.authService.user.percentage ? Number(this.authService.user.percentage) : 0) - Number(this.oldPercentage), 1.96);\n    //   console.log('New percent : ', percentage);\n    //   this.candidateService.changeInfos(Object.assign(value, {\n    //     percentage: (Math.round(percentage * 100) / 100).toFixed(2),\n    //     currentStep: 2\n    //   })).subscribe(res => {\n    //     console.log(res);\n    //     this.candidateService.candidate = res;\n    //     this.authService.user = res;\n    //     this.candidateService.setPercentage(this.candidateService.candidate.percentage);\n    //     Redirection.jobInfo();\n    //   });\n    // } else {\n    //   Redirection.jobInfo();\n    // }\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Byb2ZpbC9jb21wb25lbnRzL2V4cGVyaWVuY2UvZXhwZXJpZW5jZS5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, FormArray, Validators, ValidatorFn, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { CandidateService } from 'src/app/core/services/crud/candidate.service';\nimport { GlobalService } from 'src/app/core/services/global/global.service';\nimport { Redirection, Helper } from 'src/app/core/utils';\nimport { AuthService } from 'src/app/core/services/global/auth.service';\nimport { DatePipe, formatDate } from '@angular/common';\n\n@Component({\n  selector: 'app-experience',\n  templateUrl: './experience.component.html',\n  styleUrls: ['./experience.component.scss'],\n  providers: [DatePipe]\n})\nexport class ExperienceComponent implements OnInit {\n\n  form: FormGroup;\n  oldPercentage = 0;\n  inWork = [];\n  checkDate = false;\n\n  constructor(private fb: FormBuilder, private candidateService: CandidateService, public globalService: GlobalService,\n    public authService: AuthService) {\n    this.initForm();\n  }\n\n  ngOnInit(): void {\n    this.setValues('experiences');\n    this.setValues('trainings');\n    this.oldPercentage = Helper.calculePercentage(this.form.value, 0, 1.96);\n  }\n\n  /**\n   * init form controls\n   */\n  private initForm(): void {\n    this.form = this.fb.group({\n      levelOfStudies: new FormControl(this.candidateService.candidate['levelOfStudies'] ? this.candidateService.candidate['levelOfStudies'] : null),\n      experiences: this.fb.array([this.getExperienceFields()]),\n      trainings: this.fb.array([this.getTrainings()])\n    });\n  }\n\n  inWorkChange(i, event) {\n    if (this.inWork[i]) {\n      this.inWork[i] = false;\n      this.form.get('experiences')['controls'][i].get('endDate').value = null;\n    } else {\n      this.inWork[i] = true;\n    }\n  }\n\n  // inWorkChange(i) {\n  //   const end = this.form.get('experiences')['controls'][i].get('endDate').value.getTime();\n  //   const start = this.form.get('experiences')['controls'][i].get('startedDate').value.getTime();\n  //   return end <= start ? this.inWork = true : this.inWork = false;\n  // }\n\n  /**\n   * get experiences fields\n   */\n  private getExperienceFields(): FormGroup {\n    return this.fb.group({\n      job: new FormControl(null, Validators.required),\n      function: new FormControl(null, Validators.required),\n      startedDate: new FormControl(null, Validators.required),\n      endDate: new FormControl(null),\n      company: new FormControl(null, Validators.required),\n      activitySector: new FormControl(null, Validators.required),\n      location: new FormControl(null, Validators.required)\n    }, { validator: this.checkDates });\n  }\n\n  checkDates(group: FormGroup) {\n    if (!group.controls.endDate.value) {\n      return false;\n    }\n    const min = new Date(group.controls.startedDate.value).setHours(0, 0, 0, 0);\n    const max = new Date(group.controls.endDate.value).setHours(0, 0, 0, 0);\n    if (min === max || min > max) {\n      return { dateError: true };\n    }\n  }\n\n  /**\n   * get Trainings\n   */\n  private getTrainings(): FormGroup {\n    return this.fb.group({\n      name: new FormControl(null, Validators.required),\n      studyLevel: new FormControl(null, Validators.required),\n      typeOfTraining: new FormControl(null, Validators.required),\n      yearOfGraduation: new FormControl(null, Validators.required),\n      school: new FormControl(null, Validators.required),\n      location: new FormControl(null, Validators.required)\n    });\n  }\n\n  /**\n   * set values\n   * @param control\n   */\n  private setValues(control: string) {\n    if (this.candidateService.candidate[control] && this.candidateService.candidate[control].length > 0) {\n      let fields = <FormArray>this.form.controls[control];\n      fields.controls.splice(0);\n      fields.controls = [];\n      this.candidateService.candidate[control].forEach((val) => {\n        // this.inWork.push();\n        // console.log(val.experiences);\n        this.inWork = this.candidateService.candidate.experiences.map(x => {\n          return x.endDate ? true : false;\n        });\n        console.log(this.inWork);\n        fields.push(this.fb.group(val));\n      });\n    }\n  }\n\n  /**\n   * add field to form array\n   * @param ctrl\n   */\n  addField(ctrl: string): void {\n    const control = this.form.get(ctrl) as FormArray;\n    control.push(ctrl === 'experiences' ? this.getExperienceFields() : this.getTrainings());\n  }\n\n  /**\n   * remove field from form array\n   * @param index\n   * @param ctrl\n   */\n  removeField(index: number, ctrl: string): void {\n    const control = this.form.get(ctrl) as FormArray;\n    control.removeAt(index);\n  }\n\n  /**\n   * on save\n   */\n  onSave(): void {\n    let value = this.form.value;\n    for (let val of value['experiences']) {\n      if (!val.endDate) {\n        val.endDate === null;\n      }\n    }\n    for (let training of value['trainings']) {\n      training.yearOfGraduation = typeof training.yearOfGraduation === 'number' ? training.yearOfGraduation :\n        new Date(training.yearOfGraduation).getFullYear();\n    }\n    const percentage = Helper.calculePercentage(value, (this.authService.user.percentage ? Number(this.authService.user.percentage) : 0) - Number(this.oldPercentage), 1.96);\n    console.log(percentage);\n    console.log(value);\n    this.candidateService.changeInfos(Object.assign(value, {\n      currentStep: 4,\n      percentage: (Math.round(percentage * 100) / 100).toFixed(2)\n    })).subscribe(res => {\n      this.candidateService.candidate = res;\n      this.authService.user = res;\n      this.candidateService.setPercentage(this.authService.user.percentage);\n      Redirection.infoPlus();\n    });\n\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Byb2ZpbC9jb21wb25lbnRzL2ZpbmFsLXN0YXRlL2ZpbmFsLXN0YXRlLmNvbXBvbmVudC5zY3NzIn0= */\";","import { AfterViewChecked, Component, OnInit } from '@angular/core';\nimport { CandidateService } from 'src/app/core/services/crud/candidate.service';\nimport { AuthService } from 'src/app/core/services/global/auth.service';\nimport { ModalController } from '@ionic/angular';\nimport { PreviewCandidateComponent } from 'src/app/shared/components';\nimport { Candidate } from 'src/app/core/models/classes';\nimport { Redirection } from 'src/app/core/utils';\n\n@Component({\n  selector: 'app-final-state',\n  templateUrl: './final-state.component.html',\n  styleUrls: ['./final-state.component.scss']\n})\nexport class FinalStateComponent {\n\n  constructor(public candidateService: CandidateService, public authService: AuthService, public modalController: ModalController) {}\n\n  /**\n   * preview profil\n   */\n  async previewProfil() {\n    const modal = await this.modalController.create({\n      component: PreviewCandidateComponent\n    });\n    return await modal.present();\n  }\n\n  onClear() {\n    this.candidateService.changeInfos({\n      currentStep: 8,\n      completed: true\n    }).subscribe(res => {\n      this.candidateService.candidate = res;\n      this.authService.user = res;\n      Redirection.candidateDashboard();\n    });\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Byb2ZpbC9jb21wb25lbnRzL2luZm8tcGx1cy9pbmZvLXBsdXMuY29tcG9uZW50LnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder, FormArray, Validators } from '@angular/forms';\nimport { Redirection, Helper } from 'src/app/core/utils';\nimport { GlobalService } from 'src/app/core/services/global/global.service';\nimport { CandidateService } from 'src/app/core/services/crud/candidate.service';\nimport { AuthService } from 'src/app/core/services/global/auth.service';\nimport { NavigationEnd, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-info-plus',\n  templateUrl: './info-plus.component.html',\n  styleUrls: ['./info-plus.component.scss']\n})\nexport class InfoPlusComponent implements OnInit {\n\n  form: FormGroup;\n  languagesList = [];\n  value;\n  fileUploder = false;\n  oldPercentage = 0;\n\n  constructor(private fb: FormBuilder, public globalService: GlobalService, public candidateService: CandidateService,\n    public authService: AuthService, private router: Router) {\n    this.initForm();\n  }\n\n  ngOnInit() {\n    this.value = { file: this.candidateService.candidate ? this.candidateService.candidate['cv'] : null, type: 'simple-cv' };\n    if (this.candidateService.candidate['languages'] && this.candidateService.candidate['languages'].length > 0) {\n      console.log(this.candidateService.candidate['languages']);\n      this.candidateService.candidate['languages'].forEach(item => {\n        const languageIndex = this.globalService.languages.findIndex(x => x._id === item.language);\n        const languageLevelIndex = this.globalService.languagesLevels.findIndex(x => x._id === item.languageLevel);\n        this.languagesList.push({\n          language: this.globalService.languages[languageIndex],\n          languageLevel: this.globalService.languagesLevels[languageLevelIndex]\n        });\n      });\n    }\n    if (this.candidateService.candidate['programingLanguages']) {\n      console.log(this.candidateService.candidate['programingLanguages']['language']);\n    }\n    this.oldPercentage = Helper.calculePercentage(Object.assign(this.form.value, { languages: this.languagesList }), 0, 1.96);\n  }\n\n  /**\n   * init form\n   */\n  private initForm(): void {\n    this.form = this.fb.group({\n      languages: new FormGroup({\n        language: new FormControl(null),\n        languageLevel: new FormControl(null)\n      }),\n      programingLanguages: new FormGroup({\n        language: new FormControl(this.candidateService.candidate['programingLanguages'] ? this.candidateService.candidate['programingLanguages']['language'] : []),\n        logiciel: new FormControl(this.candidateService.candidate['programingLanguages'] ? this.candidateService.candidate['programingLanguages']['logiciel'] : [])\n      }),\n      cv: new FormControl(this.candidateService.candidate['cv'], Validators.required),\n      webSite: new FormControl(this.candidateService.candidate['webSite']),\n      blog: new FormControl(this.candidateService.candidate['blog']),\n      linkedin: new FormControl(this.candidateService.candidate['linkedin']),\n      instagram: new FormControl(this.candidateService.candidate['instagram']),\n      twitter: new FormControl(this.candidateService.candidate['twitter']),\n      facebook: new FormControl(this.candidateService.candidate['facebook'])\n    });\n  }\n\n  addLanguage() {\n    const value = this.form.get('languages').value;\n    if (value) {\n      const languageIndex = this.globalService.languages.findIndex(x => x._id === value.language);\n      const languageLevelIndex = this.globalService.languagesLevels.findIndex(x => x._id === value.languageLevel);\n      this.languagesList.push({\n        language: this.globalService.languages[languageIndex],\n        languageLevel: this.globalService.languagesLevels[languageLevelIndex]\n      });\n      this.form.get('languages').reset();\n    }\n  }\n\n  deleteLanguage(i: number) {\n    this.languagesList.splice(i, 1);\n  }\n\n  fileChanges(value) {\n    this.form.patchValue({\n      cv: value\n    });\n    this.fileUploder = true;\n  }\n\n  onSave(): void {\n    let value = this.form.value;\n    delete value['languages'];\n    value.languages = this.languagesList.map(x => ({\n      language: x.language._id,\n      languageLevel: x.languageLevel._id\n    }));\n    const percentage = Helper.calculePercentage(value, (this.authService.user.percentage ? Number(this.authService.user.percentage) : 0) - Number(this.oldPercentage), 1.96);\n    console.log('New percent : ', percentage);\n    this.candidateService.changeInfos(Object.assign(value, {\n      currentStep: 5,\n      percentage: (Math.round(percentage * 100) / 100).toFixed(2)\n    })).subscribe(res => {\n      console.log(res);\n      this.candidateService.candidate = res;\n      this.authService.user = res;\n      this.candidateService.setPercentage(this.authService.user.percentage);\n      Redirection.values();\n    });\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Byb2ZpbC9jb21wb25lbnRzL2pvYi1pbmZvL2pvYi1pbmZvLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { CandidateService } from 'src/app/core/services/crud/candidate.service';\nimport { GlobalService } from 'src/app/core/services/global/global.service';\nimport { Redirection, Helper } from 'src/app/core/utils';\nimport { AuthService } from 'src/app/core/services/global/auth.service';\nimport { IDropdownSettings } from 'ng-multiselect-dropdown';\n\n@Component({\n  selector: 'app-job-info',\n  templateUrl: './job-info.component.html',\n  styleUrls: ['./job-info.component.scss']\n})\nexport class JobInfoComponent implements OnInit {\n\n  form: FormGroup;\n  oldPercentage = 0;\n  dropdownSettings: IDropdownSettings;\n  selectedItems = [];\n\n  constructor(private candidateService: CandidateService, public globalService: GlobalService, public authService: AuthService, private fb: FormBuilder) {\n    this.initForm();\n  }\n\n  ngOnInit(): void {\n    console.log(this.authService.user.picture);\n    this.oldPercentage = Helper.calculePercentage(this.form.value, 0, 1.96);\n    this.dropdownSettings = {\n      singleSelection: false,\n      idField: '_id',\n      textField: 'name',\n      unSelectAllText: 'UnSelect All',\n      itemsShowLimit: 0,\n      allowSearchFilter: true,\n      enableCheckAll: false,\n    };\n  }\n\n  onItemSelect(event) {\n    // this.selectedItems.push(item);\n    // console.log(this.selectedItems);\n    console.log(event);\n  }\n  OnItemDeSelect(event) {\n    // this.selectedItems.slice(item);\n    // this.selectedItems = this.selectedItems.filter(worker => worker !== item);\n    console.log(event);\n  }\n  /**\n   * init job infos form\n   */\n  private initForm(): void {\n    this.form = this.fb.group({\n      searchedPost: new FormControl(this.candidateService.candidate ? this.candidateService.candidate['searchedPost'] : null, Validators.required),\n      jobType: new FormControl(this.candidateService.candidate ? this.candidateService.candidate['jobType'] : null , Validators.required),\n      jobMode: new FormControl(this.candidateService.candidate ? this.candidateService.candidate['jobMode'] : null, Validators.required),\n      supposedSalaryMin: new FormControl(this.candidateService.candidate ? this.candidateService.candidate['supposedSalaryMin'] : null, Validators.required),\n      supposedSalaryMax: new FormControl(this.candidateService.candidate ? this.candidateService.candidate['supposedSalaryMax'] : null, Validators.required),\n      usageTitles: new FormControl(this.candidateService.candidate ? this.candidateService.candidate['usageTitles'] : []),\n      functions: new FormControl(this.candidateService.candidate ? this.candidateService.candidate['functions'] : []),\n      activitySector: new FormControl(this.candidateService.candidate ? this.candidateService.candidate['activitySector'] : []),\n      locations: new FormControl(this.candidateService.candidate ? this.candidateService.candidate['locations'] : []),\n      contracts: new FormControl(this.candidateService.candidate ? this.candidateService.candidate['contracts'] : []),\n    }, { validator: this.checkSupposedSalary });\n  }\n\n  checkSupposedSalary(group: FormGroup) {\n    const min = group.controls.supposedSalaryMin.value;\n    const max = group.controls.supposedSalaryMax.value;\n    return min < max ? null : { salaryErreur: true };\n  }\n\n  /**\n   * on save\n   */\n  onSave(): void {\n    let value = this.form.value;\n    // value['usageTitles'] = value.usageTitles.map(x => x._id);\n    const percentage = Helper.calculePercentage(value, (this.authService.user.percentage ? Number(this.authService.user.percentage) : 0) - Number(this.oldPercentage), 1.96);\n    console.log('New percent : ', percentage);\n    this.candidateService.changeInfos(Object.assign(value, {\n      currentStep: 3,\n      percentage: (Math.round(percentage * 100) / 100).toFixed(2)\n    })).subscribe(res => {\n      console.log(res);\n      this.candidateService.candidate = res;\n      this.authService.user = res;\n      this.candidateService.setPercentage(this.authService.user.percentage);\n      Redirection.profileExperiences();\n    });\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Byb2ZpbC9jb21wb25lbnRzL21haW4vbWFpbi5jb21wb25lbnQuc2NzcyJ9 */\";","import { AlertController } from '@ionic/angular';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { AuthService } from 'src/app/core/services/global/auth.service';\nimport { ChildActivationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { Redirection } from 'src/app/core/utils';\nimport { CandidateService } from 'src/app/core/services/crud/candidate.service';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit, OnDestroy {\n\n  pageTitle: string;\n  subscription: Subscription;\n\n  constructor(public authService: AuthService, private router: Router, public candidateService: CandidateService, private alertController: AlertController) { }\n\n  ngOnInit(): void {\n    this.subscription = this.router.events.subscribe(event => {\n      if (event instanceof ChildActivationEnd) {\n        if (event.snapshot.firstChild.data.title) {\n          this.pageTitle = event.snapshot.firstChild.data.title;\n        }\n      }\n    });\n  }\n\n  back(): void {\n    let step = this.authService.user.currentStep ? this.authService.user.currentStep : 0;\n    switch (step) {\n      case 1:\n        Redirection.profile();\n        break;\n      case 2:\n        Redirection.addProfile();\n        break;\n      case 3:\n        Redirection.jobInfo();\n        break;\n      case 4:\n        Redirection.profileExperiences();\n        break;\n      case 5:\n        Redirection.infoPlus();\n        break;\n      case 6:\n        Redirection.values();\n        break;\n      case 7:\n        Redirection.profileVideo();\n        break;\n    }\n    console.log(step);\n    this.authService.user.currentStep = --step;\n  }\n\n  async desconnect() {\n    const alertSave = await this.alertController.create({\n      header: 'Confirmation!',\n      message: 'Souhaitez-vous enregistrer les données et continuez l\\'inscription plus tard ?',\n      buttons: [\n        {\n          text: 'NON',\n          role: 'cancel'\n        }, {\n          text: 'OUI',\n          handler: async () => {\n            const desconnect = await this.alertController.create({\n              header: 'Confirmation!',\n              message: 'Souhaitez-vous vous déconnecter ? ',\n              buttons: [\n                {\n                  text: 'NON',\n                  role: 'cancel'\n                }, {\n                  text: 'OUI',\n                  handler: () => {\n                    this.authService.logout();\n                  }\n                }\n              ]\n            });\n            await desconnect.present();\n          }\n        }\n      ]\n    });\n    await alertSave.present();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Byb2ZpbC9jb21wb25lbnRzL3BlcnNvbmFsLWluZm8vcGVyc29uYWwtaW5mby5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { CandidateService } from 'src/app/core/services/crud/candidate.service';\nimport { Redirection, Helper } from 'src/app/core/utils';\nimport { GlobalService } from 'src/app/core/services/global/global.service';\nimport { AuthService } from 'src/app/core/services/global/auth.service';\n\n@Component({\n  selector: 'app-personal-info',\n  templateUrl: './personal-info.component.html',\n  styleUrls: ['./personal-info.component.scss'],\n})\nexport class PersonalInfoComponent implements OnInit {\n\n  form: FormGroup;\n  oldPercentage = 0;\n  constructor(private candidateService: CandidateService, public authService: AuthService, public globalService: GlobalService) {\n    this.initForm();\n  }\n\n  private initForm() {\n    this.form = new FormGroup({\n      firstName: new FormControl(this.candidateService.candidate['firstName'] ? this.candidateService.candidate['firstName'] : null, Validators.required),\n      lastName: new FormControl(this.candidateService.candidate['lastName'] ? this.candidateService.candidate['lastName'] : null, Validators.required),\n      birthday: new FormControl(this.candidateService.candidate['birthday'] ? this.candidateService.candidate['birthday'] : null, Validators.required),\n      gender: new FormControl(this.candidateService.candidate['gender'] ? this.candidateService.candidate['gender'] : null, Validators.required),\n      phoneNumber: new FormControl(this.candidateService.candidate['phoneNumber'] ? this.candidateService.candidate['phoneNumber'] : null, Validators.required),\n      availability: new FormControl(this.candidateService.candidate['availability'] ? this.candidateService.candidate['availability'] : null, Validators.required),\n      experienceYears: new FormControl(this.candidateService.candidate['experienceYears'] ? this.candidateService.candidate['experienceYears'] : null, Validators.required),\n      currentJob: new FormControl(this.candidateService.candidate['currentJob'] ? this.candidateService.candidate['currentJob'] : null, Validators.required),\n      currentSalary: new FormControl(this.candidateService.candidate['currentSalary']  ? this.candidateService.candidate['currentSalary'] : null, Validators.required),\n      managerialLevel: new FormControl(this.candidateService.candidate['managerialLevel'] ? this.candidateService.candidate['managerialLevel'] : null, Validators.required),\n      effective: new FormControl(this.candidateService.candidate['effective'] ? this.candidateService.candidate['effective'] : null, Validators.required),\n      goal: new FormControl(this.candidateService.candidate['goal'] ? this.candidateService.candidate['goal'] : null, Validators.required),\n    });\n  }\n\n  ngOnInit(): void {\n    if (this.authService.user.currentStep >= 0) {\n      this.oldPercentage = Helper.calculePercentage(this.form.value, 0, 1.96);\n      console.log(this.oldPercentage);\n      console.log(this.authService.user.percentage);\n    }\n  }\n\n  /**\n   * on save\n   */\n  onSave(): void {\n    let value = this.form.value;\n    let percentage = Helper.calculePercentage(value, (Number(this.authService.user.percentage) ? Number(this.authService.user.percentage) : 0) - Number(this.oldPercentage), 1.96);\n    console.log('New percent : ', percentage = (Math.round(percentage * 100) / 100 + 3.92).toFixed(2));\n    this.candidateService.changeInfos(Object.assign(value, {\n      percentage: (Math.round(percentage * 100) / 100).toFixed(2),\n      currentStep: 1\n    })).subscribe(res => {\n      if (res) {\n        console.log(res);\n        this.authService.user = res;\n        this.candidateService.candidate = res;\n        this.candidateService.setPercentage(this.authService.user.percentage);\n        Redirection.addProfile();\n      }\n    });\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Byb2ZpbC9jb21wb25lbnRzL3ByZXZpZXctcHJvZmlsL3ByZXZpZXctcHJvZmlsLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { CandidateService } from 'src/app/core/services/crud/candidate.service';\nimport { AuthService } from 'src/app/core/services/global/auth.service';\nimport { Candidate } from 'src/app/core/models/classes';\nimport { GlobalService } from 'src/app/core/services/global/global.service';\n\n@Component({\n  selector: 'app-preview-profil',\n  templateUrl: './preview-profil.component.html',\n  styleUrls: ['./preview-profil.component.scss']\n})\nexport class PreviewProfilComponent implements OnInit {\n\n  candidate;\n  constructor(public candidateService: CandidateService, public authService: AuthService,\n    private globalService: GlobalService) { }\n\n  \n  ngOnInit(): void {\n    this.candidate = {\n      currentJob: this.candidateService.candidate['currentJob'],\n      goal: this.candidateService.candidate['goal'],\n      currentLocation: this.candidateService.candidate['currentLocation']\n    };\n    this.setTrainings();\n    this.setExperiences();\n    this.setSkills();\n    this.setValues();\n    this.setLanguages();\n    console.log(this.candidateService.candidate);\n    console.log('aaa');\n  }\n  ionViewDidEnter(): void { \n    console.log('bbbb');\n  }\n  /**\n   * set training to candidate\n   */\n  private setTrainings() {\n    this.candidate['trainings'] = this.candidateService.candidate['trainings'].map((x: any) => {\n      const studyLevelIndex = this.globalService.levelOfStudies.findIndex(s => (s._id === x.studyLevel));\n      const typeOfTrainingIndex = this.globalService.typeOfTrainings.findIndex(s => (s._id === x.typeOfTraining));\n      return {\n        yearOfGraduation: x.yearOfGraduation,\n        studyLevel: this.globalService.levelOfStudies[studyLevelIndex].name,\n        typeOfTraining: this.globalService.typeOfTrainings[typeOfTrainingIndex].name,\n      };\n    });\n  }\n\n  /**\n   * set experience to candidate\n   */\n  private setExperiences() {\n    this.candidate['experiences'] = this.candidateService.candidate['trainings'].map((x: any) => {\n      const experienceYearsIndex = this.globalService.experiences.findIndex(s => (s._id === x.experienceYears));\n      const locationIndex = this.globalService.locations.findIndex(s => (s._id === x.location));\n      return {\n        experienceYears: this.globalService.experiences[experienceYearsIndex].name,\n        location: this.globalService.locations[locationIndex].name,\n      };\n    });\n  }\n\n  /**\n   * set value to candidate\n   */\n  private setValues() {\n    this.candidate['values'] = this.candidateService.candidate['values'].map((x: any) => {\n      const valueIndex = this.globalService.values.findIndex(s => (s._id === x.value));\n      return {\n        value: this.globalService.values[valueIndex].name,\n      };\n    });\n  }\n\n  /**\n   * set skills to candidate\n   */\n  private setSkills() {\n    this.candidate['skills'] = this.candidateService.candidate['skills'].map((x: any) => {\n      const softSkillIndex = this.globalService.softSkills.findIndex(s => (s._id === x.softSkill));\n      const managerialLevelIndex = this.globalService.managerialLevels.findIndex(s => (s._id === x.managerialLevel));\n      return {\n        softSkill: this.globalService.softSkills[softSkillIndex].name,\n        managerialLevel: this.globalService.managerialLevels[managerialLevelIndex].name,\n      };\n    });\n  }\n\n  /**\n   * set languages to candidate\n   */\n  private setLanguages() {\n    this.candidate['skills'] = this.candidateService.candidate['skills'].map((x: any) => {\n      const languageIndex = this.globalService.languages.findIndex(s => (s._id === x.softSkill));\n      const languageLevelIndex = this.globalService.languagesLevels.findIndex(s => (s._id === x.managerialLevel));\n      return {\n        language: this.globalService.languages[languageIndex].name,\n        languageLevel: this.globalService.languagesLevels[languageLevelIndex].name,\n      };\n    });\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Byb2ZpbC9jb21wb25lbnRzL3VwbG9hZC12aWRlby91cGxvYWQtdmlkZW8uY29tcG9uZW50LnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { CandidateService } from 'src/app/core/services/crud/candidate.service';\nimport { Response } from 'src/app/core/models/interfaces';\nimport { Redirection, Helper } from 'src/app/core/utils';\nimport { AuthService } from 'src/app/core/services/global/auth.service';\n\n@Component({\n  selector: 'app-upload-video',\n  templateUrl: './upload-video.component.html',\n  styleUrls: ['./upload-video.component.scss']\n})\nexport class UploadVideoComponent implements OnInit {\n\n  form: FormGroup;\n  file;\n  value;\n  videoSizeError;\n  oldPercentage = 0;\n\n  constructor(private candidateService: CandidateService, public authService: AuthService) {\n    this.initForm();\n  }\n\n  ngOnInit() {\n    console.log(this.candidateService.candidate);\n    this.value = { file: this.candidateService.candidate['video'] ? this.candidateService.candidate['video'] : null, type: 'video' };\n    if (this.value.file) {\n      this.oldPercentage = 1.96;\n    }\n  }\n\n  /**\n   * init form\n   */\n  private initForm(): void {\n    this.form = new FormGroup({\n      video: new FormControl(this.candidateService.candidate['video'])\n    });\n  }\n\n  /**\n   * \n   * @param value \n   */\n  fileChanges(value) {\n    this.form.setValue({'video': value})\n  }\n\n  /**\n   * on save\n   */\n  onSave() {\n    let value = this.form.value;\n    let percentage = Helper.calculePercentage(value, (this.authService.user.percentage ? Number(this.authService.user.percentage) : 0) - Number(this.oldPercentage), 1.96);\n    value = Object.assign(value, { 'percentage': (Math.round(percentage * 100) / 100).toFixed(2), 'currentStep': 7 });\n    console.log('New percent : ', percentage);\n    this.candidateService.changeInfos(value).subscribe(res => {\n      console.log(res);\n      this.candidateService.candidate = res;\n      this.authService.user = res;\n      this.candidateService.setPercentage(this.authService.user.percentage);\n      Redirection.finalStep();\n    });\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Byb2ZpbC9jb21wb25lbnRzL3ZhbHVlcy92YWx1ZXMuY29tcG9uZW50LnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { CandidateService } from 'src/app/core/services/crud/candidate.service';\nimport { Redirection, Helper } from 'src/app/core/utils';\nimport { AuthService } from 'src/app/core/services/global/auth.service';\nimport { ModalController } from '@ionic/angular';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-values',\n  templateUrl: './values.component.html',\n  styleUrls: ['./values.component.scss']\n})\nexport class ValuesComponent implements OnInit {\n\n  form: FormGroup;\n  oldPercentage = 0;\n\n  constructor(private candidateService: CandidateService,\n    public authService: AuthService, public modalController: ModalController) {\n    this.initForm();\n  }\n\n  ngOnInit() {\n    this.oldPercentage = Helper.calculePercentage(this.form.value, 0, 1.96);\n  }\n\n  /**\n   * init form\n   */\n  initForm(): void {\n    this.form = new FormGroup({\n      values: new FormControl(this.candidateService.candidate['values'] ? this.candidateService.candidate['values'] : []),\n      skills: new FormControl(this.candidateService.candidate['skills'] ? this.candidateService.candidate['skills'] : [])\n    });\n  }\n\n  /**\n   * on save\n   */\n  onSave(): void {\n    const val = this.form.value;\n    const percentage = Helper.calculePercentage(val, (this.authService.user.percentage ? Number(this.authService.user.percentage) : 0) - Number(this.oldPercentage), 1.96);\n    // console.log('New percent : ', percentage);\n    this.candidateService.changeInfos(Object.assign(val, {\n      percentage: (Math.round(percentage * 100) / 100).toFixed(2),\n      currentStep: 6\n    })).subscribe(res => {\n      console.log(res);\n      this.candidateService.candidate = res;\n      this.authService.user = res;\n      this.candidateService.setPercentage(this.authService.user.percentage);\n      Redirection.profileVideo();\n    });\n  }\n\n}\n","import { MainComponent } from './components/main/main.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AddProfilComponent } from './components/add-profil/add-profil.component';\nimport { ExperienceComponent } from './components/experience/experience.component';\nimport { FinalStateComponent } from './components/final-state/final-state.component';\nimport { InfoPlusComponent } from './components/info-plus/info-plus.component';\nimport { JobInfoComponent } from './components/job-info/job-info.component';\nimport { PersonalInfoComponent } from './components/personal-info/personal-info.component';\nimport { PreviewProfilComponent } from './components/preview-profil/preview-profil.component';\nimport { UploadVideoComponent } from './components/upload-video/upload-video.component';\nimport { ValuesComponent } from './components/values/values.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MainComponent,\n    children: [\n      {\n        path: '',\n        component: PersonalInfoComponent,\n        data: { title: 'Informations générales' }\n      },\n      {\n        path: 'add-profil',\n        component: AddProfilComponent,\n        data: { title: 'Photo' }\n      },\n      {\n        path: 'job-info',\n        component: JobInfoComponent,\n        data: { title: 'Poste souhaité' }\n      },\n      {\n        path: 'experience',\n        component: ExperienceComponent,\n        data: { title: 'Expériences et formation' }\n      },\n      {\n        path: 'info-plus',\n        component: InfoPlusComponent,\n        data: { title: 'Compétences' }\n      },\n      {\n        path: 'upload-video',\n        component: UploadVideoComponent,\n        data: { title: 'Vidéo' }\n      },\n      {\n        path: 'values',\n        component: ValuesComponent,\n        data: { title: 'Values' }\n      },\n      {\n        path: 'final-steps',\n        component: FinalStateComponent,\n        data: { title: 'Dernière étape' }\n      },\n      {\n        path: 'preview-profil',\n        component: PreviewProfilComponent,\n        data: { title: 'Prévisualisation' }\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DashboardRoutingModule { }\n","import { NgModule } from '@angular/core';\n\nimport { DashboardRoutingModule } from './dashboard-routing.module';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { AddProfilComponent } from './components/add-profil/add-profil.component';\nimport { ExperienceComponent } from './components/experience/experience.component';\nimport { FinalStateComponent } from './components/final-state/final-state.component';\nimport { InfoPlusComponent } from './components/info-plus/info-plus.component';\nimport { JobInfoComponent } from './components/job-info/job-info.component';\nimport { PersonalInfoComponent } from './components/personal-info/personal-info.component';\nimport { PreviewProfilComponent } from './components/preview-profil/preview-profil.component';\nimport { UploadVideoComponent } from './components/upload-video/upload-video.component';\nimport { ValuesComponent } from './components/values/values.component';\nimport { MainComponent } from './components/main/main.component';\n\n@NgModule({\n  declarations: [\n    PersonalInfoComponent,\n    AddProfilComponent,\n    JobInfoComponent,\n    ExperienceComponent,\n    InfoPlusComponent,\n    UploadVideoComponent,\n    ValuesComponent,\n    FinalStateComponent,\n    PreviewProfilComponent,\n    MainComponent,\n  ],\n  imports: [\n    SharedModule,\n    DashboardRoutingModule\n  ]\n})\nexport class DashboardModule { }\n"]}